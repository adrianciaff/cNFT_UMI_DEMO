import { Context, Option, Pda, PublicKey, Signer } from '@metaplex-foundation/umi';
import { CollectionDetailsArgs, CreatorArgs, PrintSupplyArgs, TokenStandard, WithWritable } from '../generated';
export declare const resolveCollectionDetails: (context: any, accounts: any, args: {
    isCollection: boolean;
}, programId: any, isWritable: boolean) => Option<CollectionDetailsArgs>;
export declare const resolveMasterEdition: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    mint: WithWritable<PublicKey | Pda | Signer>;
}, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveMasterEditionForProgrammables: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    mint: WithWritable<PublicKey | Pda | Signer>;
}, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveDecimals: (context: any, accounts: any, args: {
    tokenStandard: TokenStandard;
}, programId: any, isWritable: boolean) => Option<number>;
export declare const resolvePrintSupply: (context: any, accounts: any, args: {
    tokenStandard: TokenStandard;
}, programId: any, isWritable: boolean) => Option<PrintSupplyArgs>;
export declare const resolveCreators: (context: any, accounts: {
    authority: WithWritable<Signer>;
}, args: any, programId: any, isWritable: boolean) => Option<CreatorArgs[]>;
export declare const resolveCreateV1Bytes: (context: any, accounts: any, args: {
    tokenStandard: TokenStandard;
}, programId: any, isWritable?: boolean) => number;
export declare const resolveOptionalTokenOwner: (context: Pick<Context, 'identity'>, accounts: {
    token?: PublicKey | Pda | undefined;
}, args: any, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string>>;
export declare const resolveTokenRecord: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    mint: WithWritable<PublicKey | Pda | Signer>;
    token: WithWritable<PublicKey | Pda | undefined>;
}, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveTokenRecordForPrint: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    editionMint: WithWritable<PublicKey | Pda | Signer>;
    editionTokenAccount: WithWritable<PublicKey | Pda | undefined>;
}, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveEditionMarkerForPrint: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: any, args: {
    tokenStandard: TokenStandard;
    masterEditionMint: PublicKey;
    editionNumber: number | bigint;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveDestinationTokenRecord: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    mint: WithWritable<PublicKey | Pda | Signer>;
    destinationToken: WithWritable<PublicKey | Pda>;
}, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
export declare const resolveAuthorizationRulesProgram: (context: Pick<Context, 'programs'>, accounts: {
    authorizationRules: WithWritable<PublicKey | Pda | undefined>;
}, args: any, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string>>;
export declare const resolveTokenProgramForNonProgrammables: (context: Pick<Context, 'programs'>, accounts: any, args: {
    tokenStandard: TokenStandard;
}, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string>>;
export declare const resolveBurnMasterEdition: (context: Pick<Context, 'eddsa' | 'programs'>, accounts: {
    masterEditionMint: WithWritable<PublicKey | Pda>;
}, args: any, programId: PublicKey, isWritable: boolean) => WithWritable<PublicKey<string> | Pda<string, number>>;
