"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintNewEditionFromMasterEditionViaToken = exports.getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        [
            'mintNewEditionFromMasterEditionViaTokenArgs',
            (0, types_1.getMintNewEditionFromMasterEditionViaTokenArgsSerializer)(),
        ],
    ], { description: 'MintNewEditionFromMasterEditionViaTokenInstructionData' }), (value) => ({ ...value, discriminator: 11 }));
}
exports.getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer = getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer;
// Instruction.
function mintNewEditionFromMasterEditionViaToken(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        newMetadata: [input.newMetadata, true],
        newEdition: [input.newEdition, true],
        masterEdition: [input.masterEdition, true],
        newMint: [input.newMint, true],
        editionMarkPda: [input.editionMarkPda, true],
        newMintAuthority: [input.newMintAuthority, false],
        tokenAccountOwner: [input.tokenAccountOwner, false],
        tokenAccount: [input.tokenAccount, false],
        newMetadataUpdateAuthority: [
            input.newMetadataUpdateAuthority,
            false,
        ],
        metadata: [input.metadata, false],
        rent: [input.rent, false],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMarkPda, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newMintAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenAccountOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newMetadataUpdateAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.rent, true);
    // Data.
    const data = getMintNewEditionFromMasterEditionViaTokenInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.mintNewEditionFromMasterEditionViaToken = mintNewEditionFromMasterEditionViaToken;
//# sourceMappingURL=mintNewEditionFromMasterEditionViaToken.js.map