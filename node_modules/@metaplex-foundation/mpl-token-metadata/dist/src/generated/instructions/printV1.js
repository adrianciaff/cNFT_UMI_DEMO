"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.printV1 = exports.getPrintV1InstructionDataSerializer = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getPrintV1InstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['printV1Discriminator', (0, serializers_1.u8)()],
        ['editionNumber', (0, serializers_1.u64)()],
    ], { description: 'PrintV1InstructionData' }), (value) => ({ ...value, discriminator: 55, printV1Discriminator: 0 }));
}
exports.getPrintV1InstructionDataSerializer = getPrintV1InstructionDataSerializer;
// Instruction.
function printV1(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        editionMint: [input.editionMint, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionMetadata', input.editionMetadata
        ? [input.editionMetadata, true]
        : [
            (0, accounts_1.findMetadataPda)(context, {
                mint: (0, umi_1.publicKey)(input.editionMint, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'edition', input.edition
        ? [input.edition, true]
        : [
            (0, accounts_1.findMasterEditionPda)(context, {
                mint: (0, umi_1.publicKey)(input.editionMint, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionTokenAccountOwner', input.editionTokenAccountOwner
        ? [input.editionTokenAccountOwner, false]
        : [context.identity.publicKey, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionTokenAccount', input.editionTokenAccount
        ? [input.editionTokenAccount, true]
        : [
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: (0, umi_1.publicKey)(input.editionMint, false),
                owner: (0, umi_1.publicKey)(resolvedAccounts.editionTokenAccountOwner[0], false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterTokenAccountOwner', input.masterTokenAccountOwner
        ? [input.masterTokenAccountOwner, false]
        : [context.identity, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionMintAuthority', input.editionMintAuthority
        ? [input.editionMintAuthority, false]
        : [resolvedAccounts.masterTokenAccountOwner[0], false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionTokenRecord', input.editionTokenRecord
        ? [input.editionTokenRecord, true]
        : (0, hooked_1.resolveTokenRecordForPrint)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, true]
        : [
            (0, accounts_1.findMasterEditionPda)(context, { mint: input.masterEditionMint }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionMarkerPda', input.editionMarkerPda
        ? [input.editionMarkerPda, true]
        : (0, hooked_1.resolveEditionMarkerForPrint)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterTokenAccount', input.masterTokenAccount
        ? [input.masterTokenAccount, false]
        : [
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: input.masterEditionMint,
                owner: (0, umi_1.publicKey)(resolvedAccounts.masterTokenAccountOwner[0], false),
            }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterMetadata', input.masterMetadata
        ? [input.masterMetadata, false]
        : [
            (0, accounts_1.findMetadataPda)(context, { mint: input.masterEditionMint }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'updateAuthority', input.updateAuthority
        ? [input.updateAuthority, false]
        : [context.identity.publicKey, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splTokenProgram', input.splTokenProgram
        ? [input.splTokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splAtaProgram', input.splAtaProgram
        ? [input.splAtaProgram, false]
        : [
            context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarInstructions', input.sysvarInstructions
        ? [input.sysvarInstructions, false]
        : [
            (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.edition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionTokenAccountOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMintAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionTokenRecord, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMarkerPda, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterTokenAccountOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.updateAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splTokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splAtaProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarInstructions, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    // Data.
    const data = getPrintV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.printV1 = printV1;
//# sourceMappingURL=printV1.js.map