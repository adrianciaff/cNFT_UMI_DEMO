"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegateTransferV1 = exports.getDelegateTransferV1InstructionDataSerializer = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getDelegateTransferV1InstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['delegateTransferV1Discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
        ['authorizationData', (0, serializers_1.option)((0, types_1.getAuthorizationDataSerializer)())],
    ], { description: 'DelegateTransferV1InstructionData' }), (value) => ({
        ...value,
        discriminator: 44,
        delegateTransferV1Discriminator: 2,
        amount: value.amount ?? 1,
        authorizationData: value.authorizationData ?? (0, umi_1.none)(),
    }));
}
exports.getDelegateTransferV1InstructionDataSerializer = getDelegateTransferV1InstructionDataSerializer;
// Instruction.
function delegateTransferV1(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        delegate: [input.delegate, false],
        mint: [input.mint, false],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvingArgs, 'tokenOwner', input.tokenOwner ?? context.identity.publicKey);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'token', input.token
        ? [input.token, true]
        : [
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: (0, umi_1.publicKey)(input.mint, false),
                owner: resolvingArgs.tokenOwner,
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'delegateRecord', input.delegateRecord
        ? [input.delegateRecord, true]
        : [
            (0, accounts_1.findTokenRecordPda)(context, {
                mint: (0, umi_1.publicKey)(input.mint, false),
                token: (0, umi_1.publicKey)(resolvedAccounts.token[0], false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'metadata', input.metadata
        ? [input.metadata, true]
        : [
            (0, accounts_1.findMetadataPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, false]
        : (0, hooked_1.resolveMasterEdition)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenRecord', input.tokenRecord
        ? [input.tokenRecord, true]
        : (0, hooked_1.resolveTokenRecord)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, false]
        : [context.identity, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarInstructions', input.sysvarInstructions
        ? [input.sysvarInstructions, false]
        : [
            (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splTokenProgram', input.splTokenProgram
        ? [input.splTokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authorizationRules', input.authorizationRules
        ? [input.authorizationRules, false]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authorizationRulesProgram', input.authorizationRulesProgram
        ? [input.authorizationRulesProgram, false]
        : (0, hooked_1.resolveAuthorizationRulesProgram)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.delegateRecord, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.delegate, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenRecord, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.token, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarInstructions, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splTokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authorizationRulesProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authorizationRules, false);
    // Data.
    const data = getDelegateTransferV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.delegateTransferV1 = delegateTransferV1;
//# sourceMappingURL=delegateTransferV1.js.map