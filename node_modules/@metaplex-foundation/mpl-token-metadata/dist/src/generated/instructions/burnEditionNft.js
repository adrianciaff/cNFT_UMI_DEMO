"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.burnEditionNft = exports.getBurnEditionNftInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getBurnEditionNftInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'BurnEditionNftInstructionData',
    }), (value) => ({ ...value, discriminator: 37 }));
}
exports.getBurnEditionNftInstructionDataSerializer = getBurnEditionNftInstructionDataSerializer;
// Instruction.
function burnEditionNft(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        metadata: [input.metadata, true],
        owner: [input.owner, true],
        printEditionMint: [input.printEditionMint, true],
        masterEditionMint: [input.masterEditionMint, false],
        printEditionTokenAccount: [input.printEditionTokenAccount, true],
        masterEditionTokenAccount: [
            input.masterEditionTokenAccount,
            false,
        ],
        masterEditionAccount: [input.masterEditionAccount, true],
        printEditionAccount: [input.printEditionAccount, true],
        editionMarkerAccount: [input.editionMarkerAccount, true],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splTokenProgram', input.splTokenProgram
        ? [input.splTokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.owner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.printEditionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEditionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.printEditionTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEditionTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEditionAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.printEditionAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMarkerAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splTokenProgram, false);
    // Data.
    const data = getBurnEditionNftInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.burnEditionNft = burnEditionNft;
//# sourceMappingURL=burnEditionNft.js.map