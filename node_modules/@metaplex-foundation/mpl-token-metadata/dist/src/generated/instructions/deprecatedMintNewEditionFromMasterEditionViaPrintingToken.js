"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deprecatedMintNewEditionFromMasterEditionViaPrintingToken = exports.getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData',
    }), (value) => ({ ...value, discriminator: 3 }));
}
exports.getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer = getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer;
// Instruction.
function deprecatedMintNewEditionFromMasterEditionViaPrintingToken(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        mint: [input.mint, true],
        mintAuthority: [input.mintAuthority, false],
        printingMint: [input.printingMint, true],
        masterTokenAccount: [input.masterTokenAccount, true],
        burnAuthority: [input.burnAuthority, false],
        masterUpdateAuthority: [input.masterUpdateAuthority, false],
        masterMetadata: [input.masterMetadata, false],
        reservationList: [input.reservationList, true],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'metadata', input.metadata
        ? [input.metadata, true]
        : [
            (0, accounts_1.findMetadataPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'edition', input.edition
        ? [input.edition, true]
        : [
            (0, accounts_1.findMasterEditionPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, true]
        : [
            (0, accounts_1.findMasterEditionPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionMarker', input.editionMarker
        ? [input.editionMarker, true]
        : [
            (0, accounts_1.findMasterEditionPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, false]
        : [context.payer, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'rent', input.rent
        ? [input.rent, false]
        : [
            (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.edition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mintAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.printingMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterTokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMarker, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.burnAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterUpdateAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.rent, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.reservationList, true);
    // Data.
    const data = getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.deprecatedMintNewEditionFromMasterEditionViaPrintingToken = deprecatedMintNewEditionFromMasterEditionViaPrintingToken;
//# sourceMappingURL=deprecatedMintNewEditionFromMasterEditionViaPrintingToken.js.map