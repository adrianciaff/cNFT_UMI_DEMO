"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.burnV1 = exports.getBurnV1InstructionDataSerializer = void 0;
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getBurnV1InstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['burnV1Discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
    ], { description: 'BurnV1InstructionData' }), (value) => ({
        ...value,
        discriminator: 41,
        burnV1Discriminator: 0,
        amount: value.amount ?? 1,
    }));
}
exports.getBurnV1InstructionDataSerializer = getBurnV1InstructionDataSerializer;
// Instruction.
function burnV1(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        mint: [input.mint, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, true]
        : [context.identity, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'collectionMetadata', input.collectionMetadata
        ? [input.collectionMetadata, true]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'metadata', input.metadata
        ? [input.metadata, true]
        : [
            (0, accounts_1.findMetadataPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'edition', input.edition
        ? [input.edition, true]
        : (0, hooked_1.resolveMasterEdition)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'tokenOwner', input.tokenOwner ?? context.identity.publicKey);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'token', input.token
        ? [input.token, true]
        : [
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: (0, umi_1.publicKey)(input.mint, false),
                owner: resolvingArgs.tokenOwner,
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEditionMint', input.masterEditionMint
        ? [input.masterEditionMint, false]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, true]
        : (0, hooked_1.resolveBurnMasterEdition)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEditionToken', input.masterEditionToken
        ? [input.masterEditionToken, false]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'editionMarker', input.editionMarker
        ? [input.editionMarker, true]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenRecord', input.tokenRecord
        ? [input.tokenRecord, true]
        : (0, hooked_1.resolveTokenRecord)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarInstructions', input.sysvarInstructions
        ? [input.sysvarInstructions, false]
        : [
            (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splTokenProgram', input.splTokenProgram
        ? [input.splTokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.edition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.token, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEditionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEditionToken, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.editionMarker, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenRecord, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarInstructions, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splTokenProgram, false);
    // Data.
    const data = getBurnV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.burnV1 = burnV1;
//# sourceMappingURL=burnV1.js.map