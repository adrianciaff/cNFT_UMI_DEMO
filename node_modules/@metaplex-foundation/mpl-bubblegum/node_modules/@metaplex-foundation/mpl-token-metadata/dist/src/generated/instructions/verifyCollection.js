"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyCollection = exports.getVerifyCollectionInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getVerifyCollectionInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'VerifyCollectionInstructionData',
    }), (value) => ({ ...value, discriminator: 18 }));
}
exports.getVerifyCollectionInstructionDataSerializer = getVerifyCollectionInstructionDataSerializer;
// Instruction.
function verifyCollection(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        metadata: [input.metadata, true],
        collectionAuthority: [input.collectionAuthority, true],
        collectionMint: [input.collectionMint, false],
        collection: [input.collection, false],
        collectionMasterEditionAccount: [
            input.collectionMasterEditionAccount,
            false,
        ],
        collectionAuthorityRecord: [
            input.collectionAuthorityRecord,
            false,
        ],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collection, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionMasterEditionAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionAuthorityRecord, true);
    // Data.
    const data = getVerifyCollectionInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.verifyCollection = verifyCollection;
//# sourceMappingURL=verifyCollection.js.map