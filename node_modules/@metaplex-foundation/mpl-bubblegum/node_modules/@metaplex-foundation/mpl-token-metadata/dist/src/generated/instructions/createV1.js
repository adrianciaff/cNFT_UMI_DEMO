"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createV1 = exports.getCreateV1InstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getCreateV1InstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['createV1Discriminator', (0, serializers_1.u8)()],
        ['name', (0, serializers_1.string)()],
        ['symbol', (0, serializers_1.string)()],
        ['uri', (0, serializers_1.string)()],
        ['sellerFeeBasisPoints', (0, umi_1.mapAmountSerializer)((0, serializers_1.u16)(), '%', 2)],
        ['creators', (0, serializers_1.option)((0, serializers_1.array)((0, types_1.getCreatorSerializer)()))],
        ['primarySaleHappened', (0, serializers_1.bool)()],
        ['isMutable', (0, serializers_1.bool)()],
        ['tokenStandard', (0, types_1.getTokenStandardSerializer)()],
        ['collection', (0, serializers_1.option)((0, types_1.getCollectionSerializer)())],
        ['uses', (0, serializers_1.option)((0, types_1.getUsesSerializer)())],
        ['collectionDetails', (0, serializers_1.option)((0, types_1.getCollectionDetailsSerializer)())],
        ['ruleSet', (0, serializers_1.option)((0, serializers_1.publicKey)())],
        ['decimals', (0, serializers_1.option)((0, serializers_1.u8)())],
        ['printSupply', (0, serializers_1.option)((0, types_1.getPrintSupplySerializer)())],
    ], { description: 'CreateV1InstructionData' }), (value) => ({
        ...value,
        discriminator: 42,
        createV1Discriminator: 0,
        symbol: value.symbol ?? '',
        primarySaleHappened: value.primarySaleHappened ?? false,
        isMutable: value.isMutable ?? true,
        collection: value.collection ?? (0, umi_1.none)(),
        uses: value.uses ?? (0, umi_1.none)(),
        collectionDetails: value.collectionDetails ?? (0, umi_1.none)(),
        ruleSet: value.ruleSet ?? (0, umi_1.none)(),
        decimals: value.decimals ?? (0, umi_1.none)(),
        printSupply: value.printSupply ?? (0, umi_1.none)(),
    }));
}
exports.getCreateV1InstructionDataSerializer = getCreateV1InstructionDataSerializer;
// Instruction.
function createV1(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        mint: [input.mint, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'metadata', input.metadata
        ? [input.metadata, true]
        : [
            (0, accounts_1.findMetadataPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvingArgs, 'tokenStandard', input.tokenStandard ?? types_1.TokenStandard.NonFungible);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, true]
        : (0, hooked_1.resolveMasterEdition)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, true));
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, false]
        : [context.identity, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'updateAuthority', input.updateAuthority
        ? [input.updateAuthority, false]
        : [resolvedAccounts.authority[0], false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarInstructions', input.sysvarInstructions
        ? [input.sysvarInstructions, false]
        : [
            (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'splTokenProgram', input.splTokenProgram
        ? [input.splTokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvingArgs, 'isCollection', input.isCollection ?? false);
    (0, shared_1.addObjectProperty)(resolvingArgs, 'collectionDetails', input.collectionDetails ??
        (0, hooked_1.resolveCollectionDetails)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'decimals', input.decimals ??
        (0, hooked_1.resolveDecimals)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'printSupply', input.printSupply ??
        (0, hooked_1.resolvePrintSupply)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'creators', input.creators ??
        (0, hooked_1.resolveCreators)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.updateAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarInstructions, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.splTokenProgram, false);
    // Data.
    const data = getCreateV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, hooked_1.resolveCreateV1Bytes)(context, resolvedAccounts, resolvedArgs, programId);
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.createV1 = createV1;
//# sourceMappingURL=createV1.js.map