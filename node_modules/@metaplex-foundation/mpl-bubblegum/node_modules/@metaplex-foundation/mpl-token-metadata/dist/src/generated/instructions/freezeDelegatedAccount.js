"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.freezeDelegatedAccount = exports.getFreezeDelegatedAccountInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getFreezeDelegatedAccountInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'FreezeDelegatedAccountInstructionData',
    }), (value) => ({ ...value, discriminator: 26 }));
}
exports.getFreezeDelegatedAccountInstructionDataSerializer = getFreezeDelegatedAccountInstructionDataSerializer;
// Instruction.
function freezeDelegatedAccount(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        delegate: [input.delegate, true],
        tokenAccount: [input.tokenAccount, true],
        mint: [input.mint, false],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'edition', input.edition
        ? [input.edition, false]
        : [
            (0, accounts_1.findMasterEditionPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.delegate, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.edition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    // Data.
    const data = getFreezeDelegatedAccountInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.freezeDelegatedAccount = freezeDelegatedAccount;
//# sourceMappingURL=freezeDelegatedAccount.js.map