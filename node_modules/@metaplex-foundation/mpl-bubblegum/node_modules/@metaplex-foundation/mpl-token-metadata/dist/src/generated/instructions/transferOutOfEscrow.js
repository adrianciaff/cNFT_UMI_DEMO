"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferOutOfEscrow = exports.getTransferOutOfEscrowInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getTransferOutOfEscrowInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
    ], { description: 'TransferOutOfEscrowInstructionData' }), (value) => ({ ...value, discriminator: 40, amount: value.amount ?? 1 }));
}
exports.getTransferOutOfEscrowInstructionDataSerializer = getTransferOutOfEscrowInstructionDataSerializer;
// Instruction.
function transferOutOfEscrow(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Resolved inputs.
    const resolvedAccounts = {
        escrow: [input.escrow, false],
        metadata: [input.metadata, true],
        attributeMint: [input.attributeMint, false],
        attributeSrc: [input.attributeSrc, true],
        attributeDst: [input.attributeDst, true],
        escrowMint: [input.escrowMint, false],
        escrowAccount: [input.escrowAccount, false],
        authority: [input.authority, false],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'ataProgram', input.ataProgram
        ? [input.ataProgram, false]
        : [
            context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarInstructions', input.sysvarInstructions
        ? [input.sysvarInstructions, false]
        : [
            (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.escrow, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.attributeMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.attributeSrc, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.attributeDst, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.escrowMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.escrowAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.ataProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarInstructions, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, true);
    // Data.
    const data = getTransferOutOfEscrowInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.transferOutOfEscrow = transferOutOfEscrow;
//# sourceMappingURL=transferOutOfEscrow.js.map