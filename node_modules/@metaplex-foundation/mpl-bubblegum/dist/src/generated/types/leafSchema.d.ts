/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { PublicKey } from '@metaplex-foundation/umi';
import { GetDataEnumKind, GetDataEnumKindContent, Serializer } from '@metaplex-foundation/umi/serializers';
export type LeafSchema = {
    __kind: 'V1';
    id: PublicKey;
    owner: PublicKey;
    delegate: PublicKey;
    nonce: bigint;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
};
export type LeafSchemaArgs = {
    __kind: 'V1';
    id: PublicKey;
    owner: PublicKey;
    delegate: PublicKey;
    nonce: number | bigint;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
};
/** @deprecated Use `getLeafSchemaSerializer()` without any argument instead. */
export declare function getLeafSchemaSerializer(_context: object): Serializer<LeafSchemaArgs, LeafSchema>;
export declare function getLeafSchemaSerializer(): Serializer<LeafSchemaArgs, LeafSchema>;
export declare function leafSchema(kind: 'V1', data: GetDataEnumKindContent<LeafSchemaArgs, 'V1'>): GetDataEnumKind<LeafSchemaArgs, 'V1'>;
export declare function isLeafSchema<K extends LeafSchema['__kind']>(kind: K, value: LeafSchema): value is LeafSchema & {
    __kind: K;
};
