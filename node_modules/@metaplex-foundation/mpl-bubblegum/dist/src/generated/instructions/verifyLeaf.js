"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyLeaf = exports.getVerifyLeafInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getVerifyLeafInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['root', (0, serializers_1.bytes)({ size: 32 })],
        ['leaf', (0, serializers_1.bytes)({ size: 32 })],
        ['index', (0, serializers_1.u32)()],
    ], { description: 'VerifyLeafInstructionData' }), (value) => ({
        ...value,
        discriminator: [124, 220, 22, 223, 104, 10, 250, 224],
    }));
}
exports.getVerifyLeafInstructionDataSerializer = getVerifyLeafInstructionDataSerializer;
// Instruction.
function verifyLeaf(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK');
    // Resolved inputs.
    const resolvedAccounts = {
        merkleTree: [input.merkleTree, false],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvingArgs, 'proof', input.proof ?? []);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.merkleTree, false);
    // Remaining Accounts.
    const remainingAccounts = resolvedArgs.proof.map((address) => [address, false]);
    remainingAccounts.forEach((remainingAccount) => (0, shared_1.addAccountMeta)(keys, signers, remainingAccount, false));
    // Data.
    const data = getVerifyLeafInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.verifyLeaf = verifyLeaf;
//# sourceMappingURL=verifyLeaf.js.map