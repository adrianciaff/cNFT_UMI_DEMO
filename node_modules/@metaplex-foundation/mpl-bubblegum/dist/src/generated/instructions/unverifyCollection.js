"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unverifyCollection = exports.getUnverifyCollectionInstructionDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getUnverifyCollectionInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['root', (0, serializers_1.bytes)({ size: 32 })],
        ['dataHash', (0, serializers_1.bytes)({ size: 32 })],
        ['creatorHash', (0, serializers_1.bytes)({ size: 32 })],
        ['nonce', (0, serializers_1.u64)()],
        ['index', (0, serializers_1.u32)()],
        ['metadata', (0, types_1.getMetadataArgsSerializer)()],
    ], { description: 'UnverifyCollectionInstructionData' }), (value) => ({
        ...value,
        discriminator: [250, 251, 42, 106, 41, 137, 186, 168],
    }));
}
exports.getUnverifyCollectionInstructionDataSerializer = getUnverifyCollectionInstructionDataSerializer;
// Instruction.
function unverifyCollection(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Resolved inputs.
    const resolvedAccounts = {
        leafOwner: [input.leafOwner, false],
        merkleTree: [input.merkleTree, true],
        collectionMint: [input.collectionMint, false],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'treeConfig', input.treeConfig
        ? [input.treeConfig, false]
        : [
            (0, accounts_1.findTreeConfigPda)(context, {
                merkleTree: (0, umi_1.publicKey)(input.merkleTree, false),
            }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'leafDelegate', input.leafDelegate
        ? [input.leafDelegate, false]
        : [input.leafOwner, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, false]
        : [context.payer, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'treeCreatorOrDelegate', input.treeCreatorOrDelegate
        ? [input.treeCreatorOrDelegate, false]
        : [context.identity.publicKey, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'collectionAuthority', input.collectionAuthority
        ? [input.collectionAuthority, false]
        : [context.identity, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'collectionAuthorityRecordPda', input.collectionAuthorityRecordPda
        ? [input.collectionAuthorityRecordPda, false]
        : [programId, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'collectionMetadata', input.collectionMetadata
        ? [input.collectionMetadata, true]
        : [
            (0, mpl_token_metadata_1.findMetadataPda)(context, {
                mint: (0, umi_1.publicKey)(input.collectionMint, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'collectionEdition', input.collectionEdition
        ? [input.collectionEdition, false]
        : [
            (0, mpl_token_metadata_1.findMasterEditionPda)(context, {
                mint: (0, umi_1.publicKey)(input.collectionMint, false),
            }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'bubblegumSigner', input.bubblegumSigner
        ? [input.bubblegumSigner, false]
        : [
            (0, umi_1.publicKey)('4ewWZC5gT6TGpm5LZNDs9wVonfUT2q5PP5sc9kVbwMAK'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'logWrapper', input.logWrapper
        ? [input.logWrapper, false]
        : [
            context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'compressionProgram', input.compressionProgram
        ? [input.compressionProgram, false]
        : [
            context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenMetadataProgram', input.tokenMetadataProgram
        ? [input.tokenMetadataProgram, false]
        : [
            context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvingArgs, 'dataHash', input.dataHash ??
        (0, hooked_1.resolveDataHash)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'creatorHash', input.creatorHash ??
        (0, hooked_1.resolveCreatorHash)(context, { ...input, ...resolvedAccounts }, { ...input, ...resolvingArgs }, programId, false));
    (0, shared_1.addObjectProperty)(resolvingArgs, 'proof', input.proof ?? []);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.treeConfig, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.leafOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.leafDelegate, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.merkleTree, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.treeCreatorOrDelegate, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionAuthorityRecordPda, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionMint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionMetadata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.collectionEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.bubblegumSigner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.logWrapper, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.compressionProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    // Remaining Accounts.
    const remainingAccounts = resolvedArgs.proof.map((address) => [address, false]);
    remainingAccounts.forEach((remainingAccount) => (0, shared_1.addAccountMeta)(keys, signers, remainingAccount, false));
    // Data.
    const data = getUnverifyCollectionInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.unverifyCollection = unverifyCollection;
//# sourceMappingURL=unverifyCollection.js.map