"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = exports.getTransferInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
function getTransferInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['root', (0, serializers_1.bytes)({ size: 32 })],
        ['dataHash', (0, serializers_1.bytes)({ size: 32 })],
        ['creatorHash', (0, serializers_1.bytes)({ size: 32 })],
        ['nonce', (0, serializers_1.u64)()],
        ['index', (0, serializers_1.u32)()],
    ], { description: 'TransferInstructionData' }), (value) => ({
        ...value,
        discriminator: [163, 52, 200, 231, 140, 3, 69, 186],
    }));
}
exports.getTransferInstructionDataSerializer = getTransferInstructionDataSerializer;
// Instruction.
function transfer(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Resolved inputs.
    const resolvedAccounts = {
        leafOwner: [input.leafOwner, false],
        newLeafOwner: [input.newLeafOwner, false],
        merkleTree: [input.merkleTree, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'treeConfig', input.treeConfig
        ? [input.treeConfig, false]
        : [
            (0, accounts_1.findTreeConfigPda)(context, {
                merkleTree: (0, umi_1.publicKey)(input.merkleTree, false),
            }),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'leafDelegate', input.leafDelegate
        ? [input.leafDelegate, false]
        : [input.leafOwner, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'logWrapper', input.logWrapper
        ? [input.logWrapper, false]
        : [
            context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'compressionProgram', input.compressionProgram
        ? [input.compressionProgram, false]
        : [
            context.programs.getPublicKey('splAccountCompression', 'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvingArgs, 'proof', input.proof ?? []);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.treeConfig, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.leafOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.leafDelegate, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.newLeafOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.merkleTree, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.logWrapper, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.compressionProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    // Remaining Accounts.
    const remainingAccounts = resolvedArgs.proof.map((address) => [address, false]);
    remainingAccounts.forEach((remainingAccount) => (0, shared_1.addAccountMeta)(keys, signers, remainingAccount, false));
    // Data.
    const data = getTransferInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.transfer = transfer;
//# sourceMappingURL=transfer.js.map