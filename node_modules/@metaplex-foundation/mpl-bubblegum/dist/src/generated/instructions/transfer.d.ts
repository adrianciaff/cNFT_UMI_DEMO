/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
export type TransferInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    leafOwner: PublicKey | Pda | Signer;
    leafDelegate?: PublicKey | Pda | Signer;
    newLeafOwner: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type TransferInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: bigint;
    index: number;
};
export type TransferInstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: number | bigint;
    index: number;
};
/** @deprecated Use `getTransferInstructionDataSerializer()` without any argument instead. */
export declare function getTransferInstructionDataSerializer(_context: object): Serializer<TransferInstructionDataArgs, TransferInstructionData>;
export declare function getTransferInstructionDataSerializer(): Serializer<TransferInstructionDataArgs, TransferInstructionData>;
export type TransferInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export type TransferInstructionArgs = PickPartial<TransferInstructionDataArgs & TransferInstructionExtraArgs, 'proof'>;
export declare function transfer(context: Pick<Context, 'programs' | 'eddsa'>, input: TransferInstructionAccounts & TransferInstructionArgs): TransactionBuilder;
