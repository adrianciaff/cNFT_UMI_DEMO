/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { DecompressableState, DecompressableStateArgs } from '../types';
export type SetDecompressableStateInstructionAccounts = {
    treeConfig: PublicKey | Pda;
    treeCreator?: Signer;
};
export type SetDecompressableStateInstructionData = {
    discriminator: Array<number>;
    decompressableState: DecompressableState;
};
export type SetDecompressableStateInstructionDataArgs = {
    decompressableState: DecompressableStateArgs;
};
/** @deprecated Use `getSetDecompressableStateInstructionDataSerializer()` without any argument instead. */
export declare function getSetDecompressableStateInstructionDataSerializer(_context: object): Serializer<SetDecompressableStateInstructionDataArgs, SetDecompressableStateInstructionData>;
export declare function getSetDecompressableStateInstructionDataSerializer(): Serializer<SetDecompressableStateInstructionDataArgs, SetDecompressableStateInstructionData>;
export type SetDecompressableStateInstructionArgs = SetDecompressableStateInstructionDataArgs;
export declare function setDecompressableState(context: Pick<Context, 'programs' | 'identity'>, input: SetDecompressableStateInstructionAccounts & SetDecompressableStateInstructionArgs): TransactionBuilder;
