/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { MetadataArgs, MetadataArgsArgs } from '../types';
export type MintV1InstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    leafOwner: PublicKey | Pda;
    leafDelegate?: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    payer?: Signer;
    treeCreatorOrDelegate?: Signer;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type MintV1InstructionData = {
    discriminator: Array<number>;
    metadata: MetadataArgs;
};
export type MintV1InstructionDataArgs = {
    metadata: MetadataArgsArgs;
};
/** @deprecated Use `getMintV1InstructionDataSerializer()` without any argument instead. */
export declare function getMintV1InstructionDataSerializer(_context: object): Serializer<MintV1InstructionDataArgs, MintV1InstructionData>;
export declare function getMintV1InstructionDataSerializer(): Serializer<MintV1InstructionDataArgs, MintV1InstructionData>;
export type MintV1InstructionArgs = MintV1InstructionDataArgs;
export declare function mintV1(context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>, input: MintV1InstructionAccounts & MintV1InstructionArgs): TransactionBuilder;
