/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { PickPartial } from '../shared';
export type DelegateInstructionAccounts = {
    treeConfig?: PublicKey | Pda;
    leafOwner: Signer;
    previousLeafDelegate: PublicKey | Pda;
    newLeafDelegate: PublicKey | Pda;
    merkleTree: PublicKey | Pda;
    logWrapper?: PublicKey | Pda;
    compressionProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type DelegateInstructionData = {
    discriminator: Array<number>;
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: bigint;
    index: number;
};
export type DelegateInstructionDataArgs = {
    root: Uint8Array;
    dataHash: Uint8Array;
    creatorHash: Uint8Array;
    nonce: number | bigint;
    index: number;
};
/** @deprecated Use `getDelegateInstructionDataSerializer()` without any argument instead. */
export declare function getDelegateInstructionDataSerializer(_context: object): Serializer<DelegateInstructionDataArgs, DelegateInstructionData>;
export declare function getDelegateInstructionDataSerializer(): Serializer<DelegateInstructionDataArgs, DelegateInstructionData>;
export type DelegateInstructionExtraArgs = {
    proof: Array<PublicKey>;
};
export type DelegateInstructionArgs = PickPartial<DelegateInstructionDataArgs & DelegateInstructionExtraArgs, 'proof'>;
export declare function delegate(context: Pick<Context, 'programs' | 'eddsa'>, input: DelegateInstructionAccounts & DelegateInstructionArgs): TransactionBuilder;
