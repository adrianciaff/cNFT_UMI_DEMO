"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompressV1 = exports.getDecompressV1InstructionDataSerializer = void 0;
const mpl_token_metadata_1 = require("@metaplex-foundation/mpl-token-metadata");
const mpl_toolbox_1 = require("@metaplex-foundation/mpl-toolbox");
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getDecompressV1InstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['metadata', (0, types_1.getMetadataArgsSerializer)()],
    ], { description: 'DecompressV1InstructionData' }), (value) => ({
        ...value,
        discriminator: [54, 85, 76, 70, 228, 250, 164, 81],
    }));
}
exports.getDecompressV1InstructionDataSerializer = getDecompressV1InstructionDataSerializer;
// Instruction.
function decompressV1(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('mplBubblegum', 'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY');
    // Resolved inputs.
    const resolvedAccounts = {
        voucher: [input.voucher, true],
        leafOwner: [input.leafOwner, true],
        mint: [input.mint, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenAccount', input.tokenAccount
        ? [input.tokenAccount, true]
        : [
            (0, mpl_toolbox_1.findAssociatedTokenPda)(context, {
                mint: (0, umi_1.publicKey)(input.mint, false),
                owner: (0, umi_1.publicKey)(input.leafOwner, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'mintAuthority', input.mintAuthority
        ? [input.mintAuthority, true]
        : [
            (0, hooked_1.findMintAuthorityPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'metadataAccount', input.metadataAccount
        ? [input.metadataAccount, true]
        : [
            (0, mpl_token_metadata_1.findMetadataPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'masterEdition', input.masterEdition
        ? [input.masterEdition, true]
        : [
            (0, mpl_token_metadata_1.findMasterEditionPda)(context, { mint: (0, umi_1.publicKey)(input.mint, false) }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'sysvarRent', input.sysvarRent
        ? [input.sysvarRent, false]
        : [
            (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenMetadataProgram', input.tokenMetadataProgram
        ? [input.tokenMetadataProgram, false]
        : [
            context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'associatedTokenProgram', input.associatedTokenProgram
        ? [input.associatedTokenProgram, false]
        : [
            context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'logWrapper', input.logWrapper
        ? [input.logWrapper, false]
        : [
            context.programs.getPublicKey('splNoop', 'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'),
            false,
        ]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.voucher, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.leafOwner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mintAuthority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.metadataAccount, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.masterEdition, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.sysvarRent, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.associatedTokenProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.logWrapper, false);
    // Data.
    const data = getDecompressV1InstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.decompressV1 = decompressV1;
//# sourceMappingURL=decompressV1.js.map