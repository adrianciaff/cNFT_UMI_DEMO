"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintTokensTo = exports.getMintTokensToInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getMintTokensToInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
    ], { description: 'MintTokensToInstructionData' }), (value) => ({ ...value, discriminator: 7 }));
}
exports.getMintTokensToInstructionDataSerializer = getMintTokensToInstructionDataSerializer;
// Instruction.
function mintTokensTo(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Resolved inputs.
    const resolvedAccounts = {
        mint: [input.mint, true],
        token: [input.token, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'mintAuthority', input.mintAuthority
        ? [input.mintAuthority, false]
        : [context.identity, false]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.token, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mintAuthority, false);
    // Data.
    const data = getMintTokensToInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.mintTokensTo = mintTokensTo;
//# sourceMappingURL=mintTokensTo.js.map