"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.recoverNestedAssociatedToken = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const shared_1 = require("../shared");
// Instruction.
function recoverNestedAssociatedToken(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    // Resolved inputs.
    const resolvedAccounts = {
        nestedAssociatedAccountAddress: [
            input.nestedAssociatedAccountAddress,
            true,
        ],
        nestedTokenMintAddress: [input.nestedTokenMintAddress, false],
        destinationAssociatedAccountAddress: [
            input.destinationAssociatedAccountAddress,
            true,
        ],
        ownerAssociatedAccountAddress: [
            input.ownerAssociatedAccountAddress,
            false,
        ],
        ownerTokenMintAddress: [input.ownerTokenMintAddress, false],
        walletAddress: [input.walletAddress, true],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.nestedAssociatedAccountAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.nestedTokenMintAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.destinationAssociatedAccountAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.ownerAssociatedAccountAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.ownerTokenMintAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.walletAddress, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    // Data.
    const data = new Uint8Array();
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.recoverNestedAssociatedToken = recoverNestedAssociatedToken;
//# sourceMappingURL=recoverNestedAssociatedToken.js.map