"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferTokensChecked = exports.getTransferTokensCheckedInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getTransferTokensCheckedInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
        ['decimals', (0, serializers_1.u8)()],
    ], { description: 'TransferTokensCheckedInstructionData' }), (value) => ({ ...value, discriminator: 12 }));
}
exports.getTransferTokensCheckedInstructionDataSerializer = getTransferTokensCheckedInstructionDataSerializer;
// Instruction.
function transferTokensChecked(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
    // Resolved inputs.
    const resolvedAccounts = {
        source: [input.source, true],
        mint: [input.mint, false],
        destination: [input.destination, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, false]
        : [context.identity, false]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.source, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.destination, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    // Data.
    const data = getTransferTokensCheckedInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.transferTokensChecked = transferTokensChecked;
//# sourceMappingURL=transferTokensChecked.js.map