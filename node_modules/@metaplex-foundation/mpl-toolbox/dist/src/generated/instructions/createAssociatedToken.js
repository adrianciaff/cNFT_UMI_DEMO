"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAssociatedToken = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const hooked_1 = require("../../hooked");
const accounts_1 = require("../accounts");
const shared_1 = require("../shared");
// Instruction.
function createAssociatedToken(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
    // Resolved inputs.
    const resolvedAccounts = {
        mint: [input.mint, false],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'payer', input.payer
        ? [input.payer, true]
        : [context.payer, true]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'owner', input.owner
        ? [input.owner, false]
        : [context.identity.publicKey, false]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'ata', input.ata
        ? [input.ata, true]
        : [
            (0, hooked_1.findAssociatedTokenPda)(context, {
                owner: (0, umi_1.publicKey)(resolvedAccounts.owner[0], false),
                mint: (0, umi_1.publicKey)(input.mint, false),
            }),
            true,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'systemProgram', input.systemProgram
        ? [input.systemProgram, false]
        : [
            context.programs.getPublicKey('splSystem', '11111111111111111111111111111111'),
            false,
        ]);
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'tokenProgram', input.tokenProgram
        ? [input.tokenProgram, false]
        : [
            context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),
            false,
        ]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.payer, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.ata, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.owner, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.mint, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.systemProgram, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.tokenProgram, false);
    // Data.
    const data = new Uint8Array();
    // Bytes Created On Chain.
    const bytesCreatedOnChain = (0, accounts_1.getTokenSize)() + umi_1.ACCOUNT_HEADER_SIZE;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.createAssociatedToken = createAssociatedToken;
//# sourceMappingURL=createAssociatedToken.js.map