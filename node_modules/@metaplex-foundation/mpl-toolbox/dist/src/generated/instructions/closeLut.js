"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeLut = exports.getCloseLutInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getCloseLutInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u32)()]], {
        description: 'CloseLutInstructionData',
    }), (value) => ({ ...value, discriminator: 4 }));
}
exports.getCloseLutInstructionDataSerializer = getCloseLutInstructionDataSerializer;
// Instruction.
function closeLut(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splAddressLookupTable', 'AddressLookupTab1e1111111111111111111111111');
    // Resolved inputs.
    const resolvedAccounts = {
        address: [input.address, true],
        recipient: [input.recipient, true],
    };
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'authority', input.authority
        ? [input.authority, false]
        : [context.identity, false]);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.address, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.authority, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.recipient, false);
    // Data.
    const data = getCloseLutInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.closeLut = closeLut;
//# sourceMappingURL=closeLut.js.map