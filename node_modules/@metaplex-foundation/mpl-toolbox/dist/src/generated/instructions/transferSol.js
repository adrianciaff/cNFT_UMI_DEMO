"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferSol = exports.getTransferSolInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getTransferSolInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u32)()],
        ['amount', (0, umi_1.mapAmountSerializer)((0, serializers_1.u64)(), 'SOL', 9)],
    ], { description: 'TransferSolInstructionData' }), (value) => ({ ...value, discriminator: 2 }));
}
exports.getTransferSolInstructionDataSerializer = getTransferSolInstructionDataSerializer;
// Instruction.
function transferSol(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
    // Resolved inputs.
    const resolvedAccounts = {
        destination: [input.destination, true],
    };
    const resolvingArgs = {};
    (0, shared_1.addObjectProperty)(resolvedAccounts, 'source', input.source
        ? [input.source, true]
        : [context.identity, true]);
    const resolvedArgs = { ...input, ...resolvingArgs };
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.source, false);
    (0, shared_1.addAccountMeta)(keys, signers, resolvedAccounts.destination, false);
    // Data.
    const data = getTransferSolInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.transferSol = transferSol;
//# sourceMappingURL=transferSol.js.map