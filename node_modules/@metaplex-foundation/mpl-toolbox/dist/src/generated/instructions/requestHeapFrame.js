"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestHeapFrame = exports.getRequestHeapFrameInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getRequestHeapFrameInstructionDataSerializer(_context = {}) {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['bytes', (0, serializers_1.u32)()],
    ], { description: 'RequestHeapFrameInstructionData' }), (value) => ({ ...value, discriminator: 1 }));
}
exports.getRequestHeapFrameInstructionDataSerializer = getRequestHeapFrameInstructionDataSerializer;
// Instruction.
function requestHeapFrame(context, input) {
    const signers = [];
    const keys = [];
    // Program ID.
    const programId = context.programs.getPublicKey('splComputeBudget', 'ComputeBudget111111111111111111111111111111');
    // Resolved inputs.
    const resolvingArgs = {};
    const resolvedArgs = { ...input, ...resolvingArgs };
    // Data.
    const data = getRequestHeapFrameInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.requestHeapFrame = requestHeapFrame;
//# sourceMappingURL=requestHeapFrame.js.map